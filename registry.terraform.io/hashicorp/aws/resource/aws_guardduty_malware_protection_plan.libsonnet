{
  local block = self,
  new(role):: (
    {}
    + block.with_role(role)
  ),
  with_actions(value):: (
    local converted = if std.isArray(value) then value else [value];
    assert std.isArray(converted) : '"actions" expected to be of type "list"';
    {
      actions: converted,
    }
  ),
  with_actions_mixin(value):: (
    local converted = if std.isArray(value) then value else [value];
    assert std.isArray(converted) : '"actions" expected to be of type "list"';
    {
      actions+: converted,
    }
  ),
  with_arn(value):: (
    local converted = value;
    assert std.isString(converted) : '"arn" expected to be of type "string"';
    {
      arn: converted,
    }
  ),
  with_created_at(value):: (
    local converted = value;
    assert std.isString(converted) : '"created_at" expected to be of type "string"';
    {
      created_at: converted,
    }
  ),
  with_id(value):: (
    local converted = value;
    assert std.isString(converted) : '"id" expected to be of type "string"';
    {
      id: converted,
    }
  ),
  '#with_region':: 'Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).',
  with_region(value):: (
    local converted = value;
    assert std.isString(converted) : '"region" expected to be of type "string"';
    {
      region: converted,
    }
  ),
  with_role(value):: (
    local converted = value;
    assert std.isString(converted) : '"role" expected to be of type "string"';
    {
      role: converted,
    }
  ),
  with_status(value):: (
    local converted = value;
    assert std.isString(converted) : '"status" expected to be of type "string"';
    {
      status: converted,
    }
  ),
  with_tags(value):: (
    local converted = value;
    assert std.isObject(converted) : '"tags" expected to be of type "map"';
    {
      tags: converted,
    }
  ),
  with_tags_all(value):: (
    local converted = value;
    assert std.isObject(converted) : '"tags_all" expected to be of type "map"';
    {
      tags_all: converted,
    }
  ),
  protected_resource:: {
    local block = self,
    new():: (
      {}
    ),
    s3_bucket:: {
      local block = self,
      new(bucket_name):: (
        {}
        + block.with_bucket_name(bucket_name)
      ),
      with_bucket_name(value):: (
        local converted = value;
        assert std.isString(converted) : '"bucket_name" expected to be of type "string"';
        {
          bucket_name: converted,
        }
      ),
      with_object_prefixes(value):: (
        local converted = if std.isArray(value) then value else [value];
        assert (std.isArray(converted) && std.length(std.set(converted)) == std.length(converted)) : '"object_prefixes" expected to be of type "set"';
        {
          object_prefixes: converted,
        }
      ),
      with_object_prefixes_mixin(value):: (
        local converted = if std.isArray(value) then value else [value];
        assert (std.isArray(converted) && std.length(std.set(converted)) == std.length(converted)) : '"object_prefixes" expected to be of type "set"';
        {
          object_prefixes+: converted,
        }
      ),
    },
    with_s3_bucket(value):: (
      local converted = if std.isArray(value) then value else [value];
      {
        s3_bucket: value,
      }
    ),
    with_s3_bucket_mixin(value):: (
      local converted = if std.isArray(value) then value else [value];
      {
        s3_bucket+: converted,
      }
    ),
  },
  with_protected_resource(value):: (
    local converted = if std.isArray(value) then value else [value];
    {
      protected_resource: value,
    }
  ),
  with_protected_resource_mixin(value):: (
    local converted = if std.isArray(value) then value else [value];
    {
      protected_resource+: converted,
    }
  ),
}
